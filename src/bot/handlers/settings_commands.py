from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from typing import Dict, Any

from ...utils.logger import get_logger, log_function_call
from ...services.user_settings import UserSettingsService

logger = get_logger(__name__)

# Conversation states
WAITING_FOR_API_KEY = 1
WAITING_FOR_PROVIDER = 2

class SettingsCommandsHandler:
    """Handler for user settings management"""
    
    def __init__(self, user_settings: UserSettingsService):
        self.user_settings = user_settings
        self.db_service = None
        self.redis_client = None
    
    def set_services(self, db_service, redis_client):
        """Set database and cache services"""
        self.db_service = db_service
        self.redis_client = redis_client
        if self.db_service and getattr(self.db_service, '_initialized', False):
            print('[DEBUG] DatabaseService injected and initialized')
        else:
            print('[DEBUG] DatabaseService injected but NOT initialized')
    
    @log_function_call
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show user settings menu"""
        user = update.effective_user
        
        # Get user's current settings
        api_keys = self.user_settings.get_user_api_keys(user.id)
        preferences = self.user_settings.get_user_preferences(user.id)
        
        # Create settings text
        settings_text = "‚öôÔ∏è **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
        
        # API Keys section
        settings_text += "üîë **API –ö–ª—é—á–∏:**\n"
        if api_keys:
            for provider, key in api_keys.items():
                masked_key = key[:10] + "..." + key[-4:] if len(key) > 14 else "***"
                settings_text += f"‚Ä¢ {provider.title()}: `{masked_key}`\n"
        else:
            settings_text += "‚Ä¢ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π\n"
        
        # Preferences section
        settings_text += "\nüéØ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n"
        provider = preferences.get('provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
        model = preferences.get('model', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
        settings_text += f"‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.title()}\n"
        settings_text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {model}\n"
        
        # Create keyboard
        keyboard = [
            [
                InlineKeyboardButton("üîë –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="add_api_key"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data="remove_api_key")
            ],
            [
                InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", callback_data="select_provider"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    @log_function_call
    async def add_api_key_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show API key addition menu"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [
                InlineKeyboardButton("ü§ñ OpenAI", callback_data="add_key_openai"),
                InlineKeyboardButton("ü§ñ Claude", callback_data="add_key_claude")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîë **–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    @log_function_call
    async def start_add_api_key(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Start API key addition process"""
        logger.info("üîç [SETTINGS] start_add_api_key called!")
        query = update.callback_query
        await query.answer()
        
        # Extract provider from callback data
        provider = query.data.replace("add_key_", "")
        context.user_data['adding_provider'] = provider
        context.user_data['conversation_state'] = 'adding_api_key'
        
        logger.info(f"üîç [SETTINGS] Starting API key addition for provider: {provider}")
        logger.info(f"üîç [SETTINGS] User data: {context.user_data}")
        
        await query.edit_message_text(
            f"üîë **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è {provider.title()}**\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á –¥–ª—è {provider.title()}.\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –í–∞—à –∫–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            parse_mode='Markdown'
        )
        
        logger.info(f"üîç [SETTINGS] Returning WAITING_FOR_API_KEY state: {WAITING_FOR_API_KEY}")
        return WAITING_FOR_API_KEY
    
    @log_function_call
    async def handle_api_key_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle API key input"""
        user = update.effective_user
        api_key = update.message.text.strip()
        provider = context.user_data.get('adding_provider')
        
        logger.info(f"üîç [SETTINGS] Processing API key input for user {user.id}, provider: {provider}")
        logger.info(f"üîç [SETTINGS] User data: {context.user_data}")
        logger.info(f"üîç [SETTINGS] API key length: {len(api_key)}")
        
        if not provider:
            logger.error(f"üîç [SETTINGS] No provider found in user data")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # Validate API key format
        if provider == "openai" and not api_key.startswith("sk-"):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç OpenAI API –∫–ª—é—á–∞!\n"
                "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-'"
            )
            return WAITING_FOR_API_KEY
        
        if provider == "claude" and not (api_key.startswith("sk-ant-") or api_key.startswith("sk-ant_api03-")):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Claude API –∫–ª—é—á–∞!\n"
                "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-ant-' –∏–ª–∏ 'sk-ant_api03-'"
            )
            return WAITING_FOR_API_KEY
        
        try:
            # Save API key
            self.user_settings.set_user_api_key(user.id, provider, api_key)
            logger.info(f"üîç [SETTINGS] API key saved for user {user.id}, provider: {provider}")
            
            # Test the API key
            test_result, error_message = await self._test_api_key(provider, api_key)
            
            if test_result:
                # Auto-switch to this provider if it's the first one or user has no preference
                current_provider = self.user_settings.get_user_provider(user.id)
                if not current_provider:
                    self.user_settings.set_user_provider(user.id, provider)
                    logger.info(f"üîç [SETTINGS] Auto-switched to provider: {provider}")
                
                success_message = (
                    f"‚úÖ API –∫–ª—é—á –¥–ª—è {provider.title()} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!\n\n"
                    f"üéØ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** {provider.title()}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {provider.title()} –≤ –±–æ—Ç–µ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
                )
            else:
                # Handle specific error cases
                if "–∫–≤–æ—Ç–∞" in error_message.lower():
                    success_message = (
                        f"‚úÖ API –∫–ª—é—á –¥–ª—è {provider.title()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                        f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** {error_message}\n\n"
                        f"–ö–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {provider.title()} –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
                    )
                else:
                    success_message = (
                        f"‚ö†Ô∏è API –∫–ª—é—á –¥–ª—è {provider.title()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª.\n\n"
                        f"‚ùå **–û—à–∏–±–∫–∞:** {error_message}\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª—é—á –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
                    )
            
            await update.message.reply_text(success_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"üîç [SETTINGS] Error saving API key: {str(e)}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞: {str(e)}\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # Clear conversation state
        context.user_data.pop('conversation_state', None)
        context.user_data.pop('adding_provider', None)
        
        return ConversationHandler.END
    
    async def _test_api_key(self, provider: str, api_key: str) -> tuple[bool, str]:
        """Test API key with a simple request. Returns (success, error_message)"""
        try:
            logger.info(f"üîç [SETTINGS] Testing API key for provider: {provider}")
            
            # Create a simple test request
            if provider == "openai":
                import openai
                client = openai.OpenAI(api_key=api_key)
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": "Hello"}],
                    max_tokens=10
                )
                return True, ""
            elif provider == "claude":
                # –î–ª—è Claude –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞, —Ç–∞–∫ –∫–∞–∫ API —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
                if api_key.startswith("sk-ant-") or api_key.startswith("sk-ant_api03-"):
                    return True, ""
                else:
                    return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Claude API –∫–ª—é—á–∞"
            else:
                logger.warning(f"üîç [SETTINGS] Unknown provider for testing: {provider}")
                return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}"
                
        except Exception as e:
            error_msg = str(e)
            logger.error(f"üîç [SETTINGS] API key test failed for {provider}: {error_msg}")
            
            # Handle specific error cases
            if "insufficient_quota" in error_msg.lower() or "quota" in error_msg.lower():
                return False, "–ö–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫–≤–æ—Ç–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
            elif "invalid_api_key" in error_msg.lower() or "authentication" in error_msg.lower():
                return False, "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞."
            elif "rate_limit" in error_msg.lower():
                return False, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                return False, f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {error_msg}"
    
    @log_function_call
    async def remove_api_key_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show API key removal menu"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        api_keys = self.user_settings.get_user_api_keys(user.id)
        
        if not api_keys:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
                ]])
            )
            return
        
        keyboard = []
        for provider in api_keys.keys():
            keyboard.append([
                InlineKeyboardButton(f"üóëÔ∏è {provider.title()}", callback_data=f"remove_key_{provider}")
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    @log_function_call
    async def remove_api_key(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Remove API key"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        provider = query.data.replace("remove_key_", "")
        
        self.user_settings.remove_user_api_key(user.id, provider)
        
        await query.edit_message_text(
            f"‚úÖ API –∫–ª—é—á –¥–ª—è {provider.title()} —É–¥–∞–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
            ]])
        )
    
    @log_function_call
    async def show_user_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show user statistics"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        stats = self.user_settings.get_user_stats(user.id)
        
        if not stats:
            stats_text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            stats_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n"
            stats_text += "–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ!"
        else:
            stats_text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
            stats_text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('messages_today', 0)}\n"
            stats_text += f"‚Ä¢ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats.get('messages_this_week', 0)}\n"
            stats_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('tokens_used', 0)}\n"
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
            ]]),
            parse_mode='Markdown'
        )
    
    @log_function_call
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries"""
        query = update.callback_query
        
        # Debug logging
        logger.info(f"üîç [SETTINGS] Received callback: {query.data} from user {query.from_user.id}")
        
        await query.answer()
        
        # Log user interaction
        if self.db_service:
            await self.db_service.log_user_interaction(
                user_id=query.from_user.id,
                chat_id=query.message.chat_id,
                action=f"settings_callback_{query.data}",
                message_type="callback_query"
            )
        
        data = query.data
        logger.info(f"üîç [SETTINGS] Processing callback: {data}")
        
        try:
            if data == "back_to_settings":
                logger.info("üîç [SETTINGS] Going back to settings")
                await self.show_settings_callback(update, context)
            elif data == "add_api_key":
                logger.info("üîç [SETTINGS] Showing add API key menu")
                await self.add_api_key_menu(update, context)
            elif data == "remove_api_key":
                logger.info("üîç [SETTINGS] Showing remove API key menu")
                await self.remove_api_key_menu(update, context)
            elif data == "select_provider":
                logger.info("üîç [SETTINGS] Showing provider selection")
                await self.show_provider_selection(update, context)
            elif data == "user_stats":
                logger.info("üîç [SETTINGS] Showing user stats")
                await self.show_user_stats(update, context)
            elif data.startswith("add_key_"):
                provider = data.replace("add_key_", "")
                logger.info(f"üîç [SETTINGS] Starting add API key for provider: {provider}")
                return await self.start_add_api_key(update, context)
            elif data.startswith("remove_key_"):
                provider = data.replace("remove_key_", "")
                logger.info(f"üîç [SETTINGS] Removing API key for provider: {provider}")
                await self.remove_api_key(update, context)
            else:
                logger.warning(f"üîç [SETTINGS] Unknown callback data: {data}")
                
        except Exception as e:
            logger.error(f"üîç [SETTINGS] Error in callback handler: {str(e)}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @log_function_call
    async def show_settings_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show user settings menu (callback version)"""
        query = update.callback_query
        user = query.from_user
        
        # Get user's current settings
        api_keys = self.user_settings.get_user_api_keys(user.id)
        preferences = self.user_settings.get_user_preferences(user.id)
        
        # Create settings text
        settings_text = "‚öôÔ∏è **–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
        
        # API Keys section
        settings_text += "üîë **API –ö–ª—é—á–∏:**\n"
        if api_keys:
            for provider, key in api_keys.items():
                masked_key = key[:10] + "..." + key[-4:] if len(key) > 14 else "***"
                settings_text += f"‚Ä¢ {provider.title()}: `{masked_key}`\n"
        else:
            settings_text += "‚Ä¢ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π\n"
        
        # Preferences section
        settings_text += "\nüéØ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n"
        provider = preferences.get('provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
        model = preferences.get('model', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
        settings_text += f"‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.title()}\n"
        settings_text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {model}\n"
        
        # Create keyboard
        keyboard = [
            [
                InlineKeyboardButton("üîë –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á", callback_data="add_api_key"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data="remove_api_key")
            ],
            [
                InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", callback_data="select_provider"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            settings_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    @log_function_call
    async def show_provider_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show provider selection menu"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        api_keys = self.user_settings.get_user_api_keys(user.id)
        
        keyboard = []
        for provider in ["openai", "claude"]:
            has_key = provider in api_keys
            status = "‚úÖ" if has_key else "‚ùå"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {provider.title()}", 
                    callback_data=f"select_provider_{provider}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéØ **–í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:\n"
            "‚úÖ - –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚ùå - –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    @log_function_call
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cancel conversation"""
        user = update.effective_user
        
        # Clear conversation state
        context.user_data.pop('conversation_state', None)
        context.user_data.pop('adding_provider', None)
        
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
        )
        
        return ConversationHandler.END 